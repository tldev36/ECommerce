generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model categories {
  id         Int        @id @default(autoincrement())
  name       String
  slug       String     @unique
  image      String?
  status     Boolean    @default(true)
  created_at DateTime?  @default(now()) @db.Timestamp(6)
  updated_at DateTime?  @default(now()) @db.Timestamp(6)
  products   products[]
}

model products {
  id                   Int                    @id @default(autoincrement())
  name                 String
  slug                 String                 @unique
  price                Decimal                @db.Decimal(10, 2)
  cost_price           Decimal                @db.Decimal(10, 2)
  unit                 String
  image                String
  short                String?
  category_id          Int?
  featured             Boolean?               @default(false)
  discount             Decimal?               @db.Decimal(5, 2)
  is_new               Boolean?               @default(false)
  is_best_seller       Boolean?               @default(false)
  stock_quantity       Int?                   @default(0)
  min_stock_level      Int?                   @default(0)
  is_active            Boolean?               @default(true)
  created_at           DateTime?              @default(now()) @db.Timestamp(6)
  updated_at           DateTime?              @default(now()) @db.Timestamp(6)
  cart_items           cart_items[]
  categories           categories?            @relation(fields: [category_id], references: [id], onUpdate: NoAction)
  purchase_order_items purchase_order_items[]
  reviews              reviews[]
  supplier_products    supplier_products[]
}

model coupon_products {
  id         Int     @id @default(autoincrement())
  coupon_id  Int
  product_id Int
  coupons    coupons @relation(fields: [coupon_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([coupon_id, product_id])
}

model coupons {
  id               Int               @id @default(autoincrement())
  code             String            @unique
  description      String?
  discount_percent Decimal?          @db.Decimal(5, 2)
  valid_from       DateTime?         @db.Timestamp(6)
  valid_until      DateTime?         @db.Timestamp(6)
  usage_limit      Int?
  created_at       DateTime?         @default(now()) @db.Timestamp(6)
  coupon_products  coupon_products[]
  orders           orders[]
}

model order_items {
  id               Int      @id @default(autoincrement())
  order_id         Int?
  product_id       Int?
  quantity         Int
  price            Decimal  @db.Decimal(10, 2)
  discount_percent Decimal? @default(0) @db.Decimal(5, 2)
  final_price      Decimal? @default(0) @db.Decimal(12, 2)
  subtotal         Decimal? @default(0) @db.Decimal(12, 2)
  orders           orders?  @relation(fields: [order_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model orders {
  id                  Int                 @id @default(autoincrement())
  user_id             Int?
  shipping_address_id Int?
  coupon_id           Int?
  total_amount        Decimal             @db.Decimal(12, 2)
  status              String
  payment_method      String
  created_at          DateTime?           @default(now()) @db.Timestamp(6)
  updated_at          DateTime?           @default(now()) @db.Timestamp(6)
  order_items         order_items[]
  coupons             coupons?            @relation(fields: [coupon_id], references: [id], onUpdate: NoAction)
  shipping_addresses  shipping_addresses? @relation(fields: [shipping_address_id], references: [id], onUpdate: NoAction)
  users               users?              @relation(fields: [user_id], references: [id], onUpdate: NoAction)
}

model purchase_order_items {
  id                Int              @id @default(autoincrement())
  purchase_order_id Int?
  product_id        Int?
  quantity          Int
  cost_price        Decimal          @db.Decimal(10, 2)
  subtotal          Decimal?         @default(dbgenerated("((quantity)::numeric * cost_price)")) @db.Decimal(12, 2)
  products          products?        @relation(fields: [product_id], references: [id], onUpdate: NoAction)
  purchase_orders   purchase_orders? @relation(fields: [purchase_order_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model purchase_orders {
  id                   Int                    @id @default(autoincrement())
  supplier_id          Int?
  status               String?                @default("pending")
  total_amount         Decimal?               @default(0) @db.Decimal(12, 2)
  created_at           DateTime?              @default(now()) @db.Timestamp(6)
  updated_at           DateTime?              @default(now()) @db.Timestamp(6)
  purchase_order_items purchase_order_items[]
  suppliers            suppliers?             @relation(fields: [supplier_id], references: [id], onUpdate: NoAction)
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model reviews {
  id         Int       @id @default(autoincrement())
  user_id    Int?
  product_id Int?
  rating     Int?
  comment    String?
  created_at DateTime? @default(now()) @db.Timestamp(6)
  products   products? @relation(fields: [product_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users      users?    @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model shipping_addresses {
  id          Int      @id @default(autoincrement())
  user_id     Int?
  full_name   String
  phone       String
  address     String
  city        String
  district    String?
  ward        String?
  postal_code String?
  country     String?  @default("Vietnam")
  orders      orders[]
  users       users?   @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model supplier_products {
  id             Int       @id @default(autoincrement())
  supplier_id    Int
  product_id     Int
  supplier_price Decimal   @db.Decimal(10, 2)
  lead_time      Int?
  stock          Int?      @default(0)
  products       products  @relation(fields: [product_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  suppliers      suppliers @relation(fields: [supplier_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([supplier_id, product_id])
}

model suppliers {
  id                Int                 @id @default(autoincrement())
  name              String
  contact_name      String?
  phone             String?
  email             String?
  address           String?
  created_at        DateTime?           @default(now()) @db.Timestamp(6)
  purchase_orders   purchase_orders[]
  supplier_products supplier_products[]
}

model users {
  id                 Int                  @id @default(autoincrement())
  username           String?              @unique
  name               String
  email              String               @unique
  password_hash      String
  phone              String?
  gender             String?
  birthday           DateTime?            @db.Date
  avatar             String?
  is_active          Boolean?             @default(true)
  role               String?              @default("customer")
  created_at         DateTime?            @default(now()) @db.Timestamp(6)
  updated_at         DateTime?            @default(now()) @db.Timestamp(6)
  cart_items         cart_items[]
  orders             orders[]
  reviews            reviews[]
  shipping_addresses shipping_addresses[]
  wishlists          wishlists[]
}

model wishlists {
  id         Int       @id @default(autoincrement())
  user_id    Int?
  product_id Int?
  created_at DateTime? @default(now()) @db.Timestamp(6)
  users      users?    @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([user_id, product_id])
}

model cart_items {
  id         Int       @id @default(autoincrement())
  user_id    Int
  product_id Int
  quantity   Int?      @default(1)
  created_at DateTime? @default(now()) @db.Timestamp(6)
  updated_at DateTime? @default(now()) @db.Timestamp(6)
  products   products  @relation(fields: [product_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_cart_product")
  users      users     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_cart_user")

  @@unique([user_id, product_id], map: "uq_cart_user_product")
}
