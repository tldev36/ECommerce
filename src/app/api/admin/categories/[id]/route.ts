import { NextResponse } from "next/server";
import { prisma } from "@/lib/prisma";
import { slugify } from "@/utils/slugify";
import { deleteImageFile } from "@/utils/deleteImageFile";

// üîπ C·∫≠p nh·∫≠t Category
export async function PUT(req: Request, { params }: { params: { id: string } }) {
  try {
    const id = Number(params.id);
    const { name, image, status } = await req.json();
    const slug = slugify(name);

    // L·∫•y th√¥ng tin c≈© ƒë·ªÉ ki·ªÉm tra xem c√≥ ·∫£nh c·∫ßn x√≥a kh√¥ng
    const oldCategory = await prisma.categories.findUnique({
      where: { id },
      select: { image: true },
    });

    // C·∫≠p nh·∫≠t DB
    const updated = await prisma.categories.update({
      where: { id },
      data: { name, slug, image, status, updated_at: new Date() },
    });

    // N·∫øu ƒë·ªïi ·∫£nh m·ªõi -> x√≥a ·∫£nh c≈©
    if (oldCategory?.image && oldCategory.image !== image) {
      deleteImageFile("categories", oldCategory.image);
    }

    return NextResponse.json(updated);
  } catch (error) {
    console.error("PUT category error:", error);
    return NextResponse.json({ error: "Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t" }, { status: 500 });
  }
}

// üîπ X√≥a Category (v√† ·∫£nh li√™n quan)
export async function DELETE(req: Request, context: { params: Promise<{ id: string }> }) {
  try {
    const { id } = await context.params; // ‚úÖ await params ·ªü ƒë√¢y
    const categoryId = Number(id);

    // üß© 1Ô∏è‚É£ Ki·ªÉm tra xem c√≥ s·∫£n ph·∫©m n√†o ƒëang d√πng category n√†y kh√¥ng
    const productCount = await prisma.products.count({
      where: { category_id: categoryId },
    });

    if (productCount > 0) {
      return NextResponse.json(
        { error: `Kh√¥ng th·ªÉ x√≥a! ƒêang c√≥ ${productCount} s·∫£n ph·∫©m s·ª≠ d·ª•ng danh m·ª•c n√†y.` },
        { status: 400 }
      );
    }

    // üß© 2Ô∏è‚É£ L·∫•y th√¥ng tin ·∫£nh tr∆∞·ªõc khi x√≥a
    const category = await prisma.categories.findUnique({
      where: { id: categoryId },
      select: { image: true },
    });

    if (!category) {
      return NextResponse.json({ error: "Danh m·ª•c kh√¥ng t·ªìn t·∫°i!" }, { status: 404 });
    }

    // üß© 3Ô∏è‚É£ X√≥a d·ªØ li·ªáu trong DB
    await prisma.categories.delete({ where: { id: categoryId } });

    // üß© 4Ô∏è‚É£ X√≥a ·∫£nh v·∫≠t l√Ω (n·∫øu c√≥)
    if (category.image) {
      deleteImageFile("categories", category.image);
    }

    return NextResponse.json({ success: true });
  } catch (error) {
    console.error("DELETE category error:", error);
    return NextResponse.json({ error: "Kh√¥ng th·ªÉ x√≥a danh m·ª•c." }, { status: 500 });
  }
}


